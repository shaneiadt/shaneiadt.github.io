{"pages":[],"posts":[{"title":"Webpack 4 Beginners","text":"In this article we will run over the basic setup for Webpack 4. Why Webpack & not some other bundler like Parcel or RollUp? I know Webpack so I figured that would be a good start, lets keep it simple shall we! Bundlers in general can make your dev life a lot easier & far more productive, but some can absorb you into config hell! For example hereâ€™s a zero configuration Webpack project minus the hair plugging. Letâ€™s create our project & setup npm as our package manager of choice. The -y flag tells npm to use the default package.json configuration, I donâ€™t care for questions thank you very much. 123mkdir webpack-4-begginnerscd webpack-4-beginnersnpm init -y Oh yeah we need to install Webpack 4 & Webpack CLI as our development dependencies (the -D flag is shorthand for â€“save-dev) & also if you donâ€™t already have it Node(Iâ€™m currently using v10.15.3). 1npm i webpack webpack-cli -D Now we can create our main index.js file which will be the entry point for our applicationâ€¦or at least thatâ€™s what weâ€™ll tell our bundler. By default with zero config Webpack will look for our entry file in the src folder of the current directory. So let us oblige. Otherwise youâ€™ll get an error & have to create it anyway, suit yourself really. 123456mkdir srccd srcecho >> index.js (Windows)touch index.js (Mac) Letâ€™s throw something into our index file. 1console.log('Webpack 4 Beginners') All we need to do now is tell Webpack to do itâ€™s magic on the stuff using the scripts section of our package.json file. 12345678910111213141516{ \"name\": \"webpack-4-beginners\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"./src/index.js\", \"scripts\": { \"build\": \"webpack\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"devDependencies\": { \"webpack\": \"^4.38.0\", \"webpack-cli\": \"^3.3.6\" }} Let the bundling commence!!! Alternatively you could run webpack straight from the command-line. 1npm run build Will you look at that we did it! A lovely dist folder containing a main.js file with some crazy looking JavaScript inside. This is our bundled js believe it our not. To demonstrate copy the code from your main.js file open your console window in Chrome (or whatever browser youâ€™re using) & run it. We now have a simple module bundler setup, what now? Letâ€™s test our bundler to make sure itâ€™s actually working. Create a new file in your src directory called message.js with the below js. 1export default \"Webpack is Awesome!\" Update your index.js file to the below 123import message from './message'console.log(message) Now run our bundler again npm run build and boom our main.js file has been updated once more. Letâ€™s inspect the output as weâ€™re only using console.log through the command-line. Run node dist/main.js from your project directory & you should see something Awesome appear. âœ¨ Our bundler is looking pretty good now, these are just the basics of course. If you fancy diving into some more details around configuring your bundler why not check out the docs. In the next article I will be covering Webpack Dev Server to improve our development workflow, along with Entry & Output configuration our your bundler. Exciting times I know woop woop! Go forth and bundle my friends ðŸ‘‹ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2019/07/29/Webpack-4-Beginners/"},{"title":"(CSS) Magic Is Real With Houdini","text":"Fed up with bloated hacky JavaScript manipulating CSS? Me too! Enter the Houdini Task Force with one simple goalâ€¦outline a collection of drafts to be accepted by W3C &amp; added as common web standards. Well it doesnâ€™t seem that simple but these guys are making great strides for the web and developers sake. Houdini will in essence offer the ability to extend the CSS rendering engine with low-level JavaScript APIs. Which will allow authors to extend the CSS engine offering massive improvements &amp; capabilities from a user experience &amp; performance point of view. Specifications Worklets CSS Paint API CSS Animation Worklet CSS Layout API Typed CSSOM WorkletsView specification Worklets themselves arenâ€™t really anything to write home about. Similar to a Web Worker a Worklet is more of a concept that makes use of ES2015 class definitions helping to expose these low-level APIs within our browser. So what is a Worklet? A Worklet is almost like a mini event loop (what is the event loop) that can attach or reposition itself to different events it is configured to. In the words of Surma think of it as your swiss army knife to accessing these low-level APIs. Letâ€™s look at our first low-level API that Worklets give us access to, the CSS Paint API. As most of these specs are still in the draft phase you may need to enable experimental web features to see them in action. chrome://flags/#enable-experimental-web-platform-featuresRead more about Worklets CSS Paint APIView specification Ok what the hell does this thing do you ask &amp; why should I be excited about it! Imagine being able to programmatically control exactly what, when &amp; how an object is drawn to the screen. With greater control using SVGs or jamming image files into your CSS may well become less of a headache. Instead of using things like background-image or border-image you can now reference a paint worklet like so paint(myPainter). Enough with the jabber show me the goodies dag-nab-it! Example Read more about CSS Paint API CSS Animation WorkletView specification This super-sweet Worklet allows us to run a set of instructions on a device at itâ€™s native frame rate preventing jumpy &amp; awkward animations. The first port of call for most animations in CSS is CSS Transitions, CSS Animations &amp; the more complex Web Animations API. With the CSS Animation API / Worklet we can listen for any user input even scroll events! This topic is quite extensive so to prevent boredom I suggest checking out the example below &amp; read more if you fancy. Example Read more about CSS Animation Worklet CSS Layout APIView specification With the ability to create &amp; control your layouts with enormous detail never imagined before! The layout worklet can even help you build your own layouts &amp; pass them into the display property, like so display: layout(&#39;myLayout&#39;). Example Read more about the CSS Layout API Typed CSSOMView specification CSS Object Model or Cascading Style Sheets Object Model (Typed CSSOM). If you are familiar with a programming language or two you might have stumbled upon some Object Oriented stuff &amp; data types. What this specification focuses on is the typing part, mainly the typing of CSS values as JavaScript objects. With Typed CSSOM every CSS value is now a member of a new base class called CSSStyleValue. These values can then be extended to help authors manage calculations &amp; different value types such as rem, px, em &amp; percent. Example The Task ForceWith engineers from the likes of Apple, Google &amp; Microsoft working together (i know scary right!) on these potentially new web standards how could you not be excited! ConclusionI wanted to keep these sections briefâ€¦so there you have it! Not all the specifications are fully stable at the moment but Houdini &amp; Worklets wonâ€™t be going away anytime soon. Keep your ear close to the coconut on this one peoples. Resources Is Houdini Ready Yet? CSS Houdini Github Wiki Houdini updates on developer.google. Houdini draft specifications Chrome Dev Summit Video Google Chrome Lab Houdini Examples","link":"/2019/03/29/CSS-Magic-is-real-with-Houdini/"},{"title":"Are Class Components Dead? - React Hooks","text":"Since the full release of Hooks with React version 16.8 the community has almost gone insane. Some developers have gone so bat shit crazy theyâ€™ve re-written all their apps to use React Hooks! What are hooks? Plainly put, like most things JavaScript theyâ€™re just functionsâ€¦.simples! But with the power of scope closures they expose the beauty of Reacts state, lifecycle methods &amp; even Context API. You can even write your own hooks if you fancy. What kind of stuff can we do with Hooks, why should I care? Class components work just fine when I need some state &amp; functional components are great for returning some JSX using a straight forward JS function. But wouldnâ€™t it be cool if you could upgrade these functional components to have their own internal state or do some processing when mounted instead of relying on the parent component to decide if it needs to be re-render or not. Letâ€™s start off simple &amp; sprinkle a bit of state on the situation. useStateThis hook is amazing, it works slightly different from the class based approach. Instead of managing your state in one big object, which you still can do of course. With useState we can create slices of state like so. View Demo Code 12345678910111213141516171819202122232425262728293031import React, &#123; useState &#125; from \"react\";import ReactDOM from \"react-dom\";function WhatTheState() &#123; const [count, setCount] = useState(0); const [text, setText] = useState(null); return ( &lt;div style=&#123;&#123; textAlign: \"center\" &#125;&#125;&gt; &#123;text !== null ? ( &lt;div&gt; &lt;p&gt; Hello my name is &#123;text&#125; &amp; you pushed my button &#123;count&#125; times &lt;/p&gt; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click me&lt;/button&gt; &lt;/div&gt; ) : null&#125; &#123;text === null ? &lt;p&gt;Enter your name to start pushing!!&lt;/p&gt; : null&#125; &lt;p&gt; &lt;input type=\"text\" value=&#123;text&#125; onChange=&#123;event =&gt; setText(event.target.value)&#125; /&gt; &lt;/p&gt; &lt;/div&gt; );&#125;const rootElement = document.getElementById(\"root\");ReactDOM.render(&lt;WhatTheState /&gt;, rootElement); Bam your functional components can now manage their own state in slicesâ€¦.super sweet I know. The only downside to using this approach is when you are updating your state slice you will need to supply all values otherwise they wonâ€™t be included. Whatâ€™s next you ask? What about when our component mounts, checks for updates or is destroyed? Lets control what happens when our component mounts to the DOM using the handy useEffect hook. useEffectWe can manipulate or hook into the render cycles of our component now like so. View Code Demo 123456789101112131415161718192021222324252627282930313233343536import React, &#123; useState, useEffect &#125; from \"react\";import ReactDOM from \"react-dom\";function WhatTheState() &#123; const [count, setCount] = useState(0); const [text, setText] = useState(null); useEffect(() =&gt; &#123; // Just Like componentDidMount() setText(\"Johnny\") &#125;,[]) return ( &lt;div style=&#123;&#123; textAlign: \"center\" &#125;&#125;&gt; &#123;text !== null ? ( &lt;div&gt; &lt;p&gt; Hello my name is &#123;text&#125; &amp; you pushed my button &#123;count&#125; times &lt;/p&gt; &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click me&lt;/button&gt; &lt;/div&gt; ) : null&#125; &#123;text === null ? &lt;p&gt;Enter your name to start pushing!!&lt;/p&gt; : null&#125; &lt;p&gt; &lt;input type=\"text\" value=&#123;text&#125; onChange=&#123;event =&gt; setText(event.target.value)&#125; /&gt; &lt;/p&gt; &lt;/div&gt; );&#125;const rootElement = document.getElementById(\"root\");ReactDOM.render(&lt;WhatTheState /&gt;, rootElement); No need to create a stateful container anymore! Cool right? Well thatâ€™s not all we can do. We can also trigger the render based on some state change by telling the hook what to watch. Add variables to the array youâ€™d like your component to watch &amp; your useEffect() function will trigger again. 1234useEffect(() =&gt; &#123; // Similar to componentDidUpdate, we are watching for changes to the text variable setText(\"Johnny\") &#125;,[text]) Last but not least we can also fire some function based on the component unmounting too. By default if your useEffect function returns a function it will invoke it when the component is unmounted. 1234567useEffect(() =&gt; &#123; // Similar to componentDidUpdate, we are watching for changes to the text variable setText(\"Johnny\") return function cleanup() &#123; // Do some cleanup logic here! &#125;; &#125;,[text]) What if weâ€™re using some global state i hear you ask? Enter Reactâ€™s Context APIâ€¦.but wait because weâ€™re using functional components we need to use a hook insteadâ€¦useContext hook to be exact. useContextBy far for me this hook is one of the best. I wouldnâ€™t say Iâ€™ve had any issues with React but for a long time there was no way to manage global app state without using a third party package such as React Redux or React Easy State. Passing props around to other components can be ok when itâ€™s two or three, but when youâ€™re passing down props through maybe 5 different components just to tell a button the app is in a loading state it becomes a bit much! View Demo Code 12345678910111213141516171819202122232425262728293031323334353637import React from \"react\";import ReactDOM from \"react-dom\";import \"./styles.css\";class App extends React.Component &#123; state = &#123; loading: true &#125;; render() &#123; return ( &lt;div className=\"App\"&gt; &lt;Form loading=&#123;this.state.loading&#125; /&gt; &lt;/div&gt; ); &#125;&#125;const Form = (&#123; loading &#125;) =&gt; &#123; return ( &lt;form&gt; &lt;h2&gt;Fill Me In&lt;/h2&gt; &lt;input type=\"text\" /&gt; &lt;p&gt; &lt;Button loading=&#123;loading&#125; /&gt; &lt;/p&gt; &lt;/form&gt; );&#125;;const Button = (&#123; loading &#125;) =&gt; &#123; if (loading) return &lt;p&gt;No Button Form is Loading&lt;/p&gt;; return &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;;&#125;;const rootElement = document.getElementById(\"root\");ReactDOM.render(&lt;App /&gt;, rootElement); Do not fret my friends, useContext gives us access to extend our functional components. The below example illustrates how we can create some context &amp; subscribe to it within our functional components using Reacts useContext hook. View Code Demo 123456789101112131415161718192021222324252627282930313233343536373839404142import React from \"react\";import ReactDOM from \"react-dom\";import \"./styles.css\";const AppContext = React.createContext(&#123; loading: \"\" &#125;);class App extends React.Component &#123; state = &#123; loading: true &#125;; render() &#123; return ( &lt;AppContext.Provider value=&#123;&#123; ...this.state &#125;&#125;&gt; &lt;div className=\"App\"&gt; &lt;Form loading=&#123;this.state.loading&#125; /&gt; &lt;/div&gt; &lt;/AppContext.Provider&gt; ); &#125;&#125;const Form = () =&gt; &#123; return ( &lt;form&gt; &lt;h2&gt;Fill Me In&lt;/h2&gt; &lt;input type=\"text\" /&gt; &lt;p&gt; &lt;Button /&gt; &lt;/p&gt; &lt;/form&gt; );&#125;;const Button = (&#123; loading &#125;) =&gt; &#123; const context = React.useContext(AppContext); if (context.loading) return &lt;p&gt;No Button Form is Loading&lt;/p&gt;; return &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;;&#125;;const rootElement = document.getElementById(\"root\");ReactDOM.render(&lt;App /&gt;, rootElement); Of course you could use another state management package but I like this approach as weâ€™re relying on one package without any third party setup, no messing around with mapStateToProps for me anymore. Why mess with extra libraries when React provides a tool for exactly what weâ€™re trying to solve. Side note: The size of your state will most likely determine the kind of management system you want to adopt. Last but not least React gives us the option to extend this architecture with the useHook function. This is prime time for a custom hook you might have in mind. I would provide another demo but my face is tired, have a read of this if youâ€™re interested. ConclusionFirst off, React as a whole is amazing &amp; Iâ€™m so glad I have the opportunity to develop with it every dayâ€¦and get paid! Hooks are an amazing feature the React team have provided us with but understanding the core concepts of the React ecosystem &amp; architecture in my opinion boils down to a strong grasp of stateful vs functional components. If you can write an app using only class based stateful components go right ahead, stateful container components arenâ€™t leaving us anytime soon. Class components are a staple in React as far as understanding goes thatâ€™s for sure. Hooks just give it a little extension for those pure functions that donâ€™t require a full state render method to be defined. Need some scoped state, useStateâ€¦need some lifecycle management / side-effects to happen useEffectâ€¦want to clean up your global context state useContextâ€¦have an idea for a reusable hookâ€¦build your own! There are a couple of advanced uses regarding useContext coupled with useReducer &amp; some Higher Order Components (HOC) to completely over all your state management which you can have a read of here. Also Iâ€™d like to point out there are a couple more hooks I havenâ€™t mention in this article for example useMemo, useRef &amp; a couple others. Love hooks or React? Read more React Hooks","link":"/2019/06/22/Are-Class-Components-Dead-React-Hooks/"}],"tags":[{"name":"Webpack","slug":"Webpack","link":"/tags/Webpack/"},{"name":"Bundling","slug":"Bundling","link":"/tags/Bundling/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"Houdini","slug":"Houdini","link":"/tags/Houdini/"},{"name":"JavaScript API","slug":"JavaScript-API","link":"/tags/JavaScript-API/"},{"name":"React Hooks","slug":"React-Hooks","link":"/tags/React-Hooks/"},{"name":"Javascript","slug":"Javascript","link":"/tags/Javascript/"}],"categories":[]}
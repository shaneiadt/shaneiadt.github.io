{"pages":[{"title":"","text":"What is the Shadow DOM? That's a pretty dang good question! This is our fallback text const shadowHost = document.querySelector(\"#root\"); const shadow = shadowHost.attachShadow({ mode: 'open' }); const paragraph = document.createElement(\"p\"); paragraph.innerText = ` It's an awesome way to create re-useable encapsulated web components! `; shadow.appendChild(paragraph) const styles = document.createElement(\"style\"); styles.textContent = ` p { font-weight: bold; font-size: 50px; width: 50%; color: purple; } `; shadow.appendChild(styles); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/images/start-using-the-shadow-dom/shadow-dom.html"}],"posts":[{"title":"Start Using the Shadow DOM","text":"What the heck is this Shadow DOM I’ve been hearing about? The Shadow DOM was created to improve encapsulation of components on the web. Previously & still to this day companies such as Facebook & Twitter expose their like & follow buttons through an iframe element. This ensures the styles of the button remain intact when used on other web pages. Yes the Shadow DOM is awesome for scoping styles to it’s child elements 👏 You can think of the Shadow DOM as a slimline version of the full Document Object Model (DOM). The good news is now we can create a similar encapsulated component without the need for any iframe use! Note: Shadow DOM is supported by default in Firefox (63 and onwards), Chrome, Opera, and Safari. The new Chromium-based Edge (75 and onwards) supports it too; the old Edge didn’t. Let The Ninja Training BeginLet’s start off with a simple HTML document. 12345678910111213141516 Simple DOM example What is the Shadow DOM? That's a pretty dang good question! This is our fallback text Now this will produce a DOM structure like so. The Shadow DOM works by allowing hidden DOM tree elements to be attached to what is called the shadow root, which is just the root node / parent element pretty much. An interesting thing to note here is the Shadow DOM isn’t anything new, browsers have been using these shadow trees to render for example a range input slider or the browsers video controls. Here’s an example of the input element with a range type using the Shadow DOM API to render the slider. The slider… Here’s a screenshot of what it looks like from dev tools. Note: you must enable the “Show user agent shadow DOM” option within the dev tools settings to see this in your console. Using The ShadowsNow let’s attempt to create our own element that uses this Shadow DOM API. First we need to select our element make it the shadow host, which is a regular DOM element which the shadow DOM is attached to. 12const shadowHost = document.querySelector(\"#root\");const shadow = shadowHost.attachShadow({mode: 'open'}); The difference with mode open & closed is with it set to open you can access the shadow DOM using JavaScript written in the main page context. Here’s what the element looks like from the dev tools now. Encapsulation FTW!Now that we have our shadow host setup we can start adding elements into it using the DOM API. Let’s create a simple paragraph tag & append it to over shadow DOM tree. 123456const paragraph = document.createElement(\"p\");paragraph.innerText = ` It's an awesome way to create re-useable encapsulated web components!`;shadow.appendChild(paragraph) Which results in a little something like so… Adding Some StyleBecause our shadow DOM is scoped to itself we can now add our own styles & they will be encapsulated to the elements we’ve attached / appended. 12345678910const styles = document.createElement(\"style\");styles.textContent = ` p { font-weight: bold; font-size: 50px; width: 50%; color: purple; }`;shadow.appendChild(styles); Pretty cool yeah I know! Our fall-back text is in place just encase the current browser doesn’t support the Shadow DOM API. Here’s the complete example we used in this article, why not test it out locally 👍 12345678910111213141516171819202122232425262728293031323334353637383940414243 Simple DOM example What is the Shadow DOM? That's a pretty dang good question! This is our fallback text const shadowHost = document.querySelector(\"#root\"); const shadow = shadowHost.attachShadow({ mode: 'open' }); const paragraph = document.createElement(\"p\"); paragraph.innerText = ` It's an awesome way to create re-useable encapsulated web components! `; shadow.appendChild(paragraph) const styles = document.createElement(\"style\"); styles.textContent = ` p { font-weight: bold; font-size: 50px; width: 50%; color: purple; } `; shadow.appendChild(styles); Lessons LearnedThe Shadow DOM itself is a collection of HTML elements (a tree) which is rendered like any other element. But unlike the DOM, a Shadow DOM Tree requires to be attached to an element within the regular DOM. Without the DOM, we are nothing 🙇 Start creating re-usable web components using the Shadow DOM API today & amaze all that surround you 😆 😂 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2019/09/11/Start-Using-The-Shadow-DOM/"},{"title":"Webpack-4-Beginners-Configuration","text":"Welcome to Part 2 of our journey into understanding Webpack just a wee bit better together! If you haven’t read Part 1 I suggest you check it out. We left off from here: https://github.com/shaneiadt/webpack-4-beginners/tree/master/zero-config So we’ve set up our basic zero config bundler project, what now? Two Modes, One Entry FileLet’s spice things up by taking advantage of the two modes our bundler can be set to, development & production. By default Webpack will assume you are running in production mode if not specified. What’s the difference? Production reduces the bundle as much as it can & development contains things like comments & line-breaks that make debugging easier. We can also setup source-maps but we won’t get into it for now. We’ll set our mode by updating our npm build script. 123\"scripts\": { \"build\": \"webpack --mode development\"}, and of course run the following npm run build. Now have a look at our main.js file, you can see it’s not bundled within an inch of it’s life. Perfect for…you guessed it, development purposes! Entry & OutputWhat else can we configure? What if we want to specify a different entry & output file? Well we can do that too from our build script. 123\"scripts\": { \"build\": \"webpack --mode development ./src/a-different-entry-file.js --output ./temp/new-bundle.js\"}, If we run the above we’re saying hey Webpack our entry file is now here ./src/a-different-entry-file.js and by the way output the bundle here ./temp/new-bundle.js. Don’t worry Webpack will create the folder for us 😉 Multiple Entry FilesLet’s say we have multiple entry files how would we manage something like that. Well with something as simple as this. 123\"scripts\": { \"build\": \"webpack --mode development index=./src/index.js entry2=./src/a-different-entry-file.js\"}, When specifying multiple entry files we can’t bundle to one output file. Webpack will throw an error if you try anyway. As our build script continues to grow wouldn’t it be great if we could manage our configuration options an easier way….well there is!! Configuration FileLets create a configuration file called webpack.config.js for our bundling options. This can be named anything fyi! In order for Webpack to read this file correctly we need to export what’s inside it…using module.exports. Add the below code into our new config file. 123module.exports = {} Now it’s time to add in our previous command-line config options. Note: I’ll keep this section light as these config files can get a bit confusing to say the least. Check the Webpack docs for further options. 1234module.exports = { entry: \"./src/index.js\" mode: \"development\"} Update our build script to tell Webpack where our config file is and npm run build. 123\"scripts\": { \"build\": \"webpack --config webpack.config.js\"}, Awesome our bundling is coming along quite nicely. We can even split out a production & development version of our output bundles with some common options included. Two Configs with Options in CommonCreate a new common config file called webpack.common.js and add the below common config options. 1234567const options = { entry: \"./src/index.js\"}module.exports = { options} If we wanted to include multiple entry files we could. 12345678910const options = { entry: { home: './src/index.js', misc: './src/a-different-entry-file.js' }}module.exports = { options} Update our webpack.config.js to include these common options. We’ll use the ES6 spread operator to include these settings. 123456const webpackCommon = require('./webpack.common')module.exports = { ...webpackCommon[\"options\"], mode: \"development\"} Create another file called webpack.prod.js and add the following. 123456const webpackCommon = require(\"./webpack.common\")module.exports = { ...webpackCommon[\"options\"], mode: \"production\"} Finally update our npm scripts for these two new bundling modes. 1234\"scripts\": { \"build\": \"webpack --config webpack.config.js\", \"prod\": \"webpack --config webpack.prod.js\"}, Finally to test out new prod script npm run prod…👐 💥 We did it! 💥 If we check our main.js file now it’s completely minified as we’ve specified in our webpack.prod.js config file. I think that’s enough Webpack magic for now! Next time we’ll look at Webpack Dev Server in an effort to speed up our development process. SummaryWe’ve gone over some core concepts in this article including both development & production bundling modes, multiple entry files & extracting our Webpack configuration options to a couple of external files for ease of management. Next topic shall be (as mentioned above) Webpack Dev Server. Github Repo: https://github.com/shaneiadt/webpack-4-beginners/tree/master/a-little-config document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2019/07/31/Webpack-4-Beginners-Configuration/"},{"title":"Webpack 4 Beginners","text":"In this article we will run over the basic setup for Webpack 4. Why Webpack & not some other bundler like Parcel or RollUp? I know Webpack so I figured that would be a good start, lets keep it simple shall we! Bundlers in general can make your dev life a lot easier & far more productive, but some can absorb you into config hell! For example here’s a zero configuration Webpack project minus the hair plugging. Let’s create our project & setup npm as our package manager of choice. The -y flag tells npm to use the default package.json configuration, I don’t care for questions thank you very much. 123mkdir webpack-4-begginnerscd webpack-4-beginnersnpm init -y Oh yeah we need to install Webpack 4 & Webpack CLI as our development dependencies (the -D flag is shorthand for –save-dev) & also if you don’t already have it Node(I’m currently using v10.15.3). 1npm i webpack webpack-cli -D Now we can create our main index.js file which will be the entry point for our application…or at least that’s what we’ll tell our bundler. By default with zero config Webpack will look for our entry file in the src folder of the current directory. So let us oblige. Otherwise you’ll get an error & have to create it anyway, suit yourself really. 123456mkdir srccd srcecho >> index.js (Windows)touch index.js (Mac) Let’s throw something into our index file. 1console.log('Webpack 4 Beginners') All we need to do now is tell Webpack to do it’s magic on the stuff using the scripts section of our package.json file. 12345678910111213141516{ \"name\": \"webpack-4-beginners\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"./src/index.js\", \"scripts\": { \"build\": \"webpack\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"devDependencies\": { \"webpack\": \"^4.38.0\", \"webpack-cli\": \"^3.3.6\" }} Let the bundling commence!!! Alternatively you could run webpack straight from the command-line. 1npm run build Will you look at that we did it! A lovely dist folder containing a main.js file with some crazy looking JavaScript inside. This is our bundled js believe it our not. To demonstrate copy the code from your main.js file open your console window in Chrome (or whatever browser you’re using) & run it. We now have a simple module bundler setup, what now? Let’s test our bundler to make sure it’s actually working. Create a new file in your src directory called message.js with the below js. 1export default \"Webpack is Awesome!\" Update your index.js file to the below 123import message from './message'console.log(message) Now run our bundler again npm run build and boom our main.js file has been updated once more. Let’s inspect the output as we’re only using console.log through the command-line. Run node dist/main.js from your project directory & you should see something Awesome appear. ✨ Our bundler is looking pretty good now, these are just the basics of course. If you fancy diving into some more details around configuring your bundler why not check out the docs. In the next article I will be covering Webpack Dev Server to improve our development workflow, along with Entry & Output configuration our your bundler. Github Repo: https://github.com/shaneiadt/webpack-4-beginners Exciting times I know woop woop! Go forth and bundle my friends 👋 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2019/07/29/Webpack-4-Beginners/"},{"title":"What Is Docker?","text":"Continuous development on a project will result in it expanding (it’s natural man deal with it 🍀), as our projects / services grow so will our code base…into a monolithic monster! Managing & monitoring these services can be a massive pain…even setting up an environment to develop on can take some time & produce unwanted brain headaches 😵 Enter Docker! This mystical application gives us a way to run all our services or docker images across multiple environments preventing that initial environment setup and management fuss! With multiple layers / microservices working together in tandem Docker builds containers around each service layer and exposes it on our dev machine. Note: Docker images & compose files can also be built & run in the cloud with something like Azure Container Registry. Before developers had to wrestle with virtualised machines like VMWare, VirtualBox and other sandbox environments. Which did the job but weren’t ideal or easy to setup. With Docker as our container platform we can wrap each service up with everything it needs to run including runtime variables and even what system tools to use. This is essentially a light-weight alternative to a full virtual machine. Using the host machine we can build images & containers that are highly scalable and super fast to spin up and deploy. What are containersA container consists of an image file with some Docker specific commands around what we want it to do once built & run. This image or dockerfile is used to bundle our application into a single executable package. This application is initially running in isolation from our host machine environment. Each image has access to a fully writable file system, volumes and other OS commands for extra functionality. Docker HubIf you’ve ever come across a package manager like NPM, Yarn or NuGet this is the equivalent repository for docker images & containers. Much like npm you can clone / download images written by others & run them on your machine. Installing DockerFollow the instructions here: https://www.docker.com/get-started. Signup, Verify & Download! Our first DockerfileOnce we have docker running on our machine it’s time to test this puppy out! Create a new folder (call it whatever you like) & create a dockerfile inside. Filename is dockerfile no dot file extensions or anything required. Most modern IDE’s will have built in support for recognising this type of file. As dockerfiles do not expose a port by default we will run this using docker-compose. This is pretty much a container manager & it comes with your Docker Desktop install by default. Enjoy the whale icon 🐳 What are we going to build you ask? Let’s start with a simple Express server setup for some super-sweet app we have in the works 😎 Github: https://github.com/shaneiadt/docker-with-node-example Clone the repo, build & run: 1docker-compose up --build In your browser navigate to http://localhost:3030 and you should see that our node server is running! Docker CommandsThe most common docker commands you will see are as follows: FROM (Pulls images from docker hub registry) WORKDIR (Specifies the current working directory) COPY (does what is says…copies files & folders) RUN (executes command-line stuff…this is also know as an “Image Build Step“) CMD (You will usually only see one CMD with a array of arguments) Docker ComposeWhat about this composer deal? Well Docker Compose handles the running of multiple containers. First you setup what services to orchestrate including the service name, container to build & what port to expose this service on. It is also good practice to get into the habit of cleaning up your containers by running: 1docker-compose down As we are only dipping our toe into the Docker world I won’t go too much into volumes for interacting with the file system or some other docker / compose commands. If you’d like to read more I’d highly recommend taking a whirl through the official docs. To summarise Docker is awesome, play around with it & try converting a small project into a container for practice. document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2019/10/14/What-is-Docker/"},{"title":"Webpack 4 Beginners Dev IT Faster","text":"Welcome to Part 3 of our journey into understanding Webpack just a wee bit better together! If you haven’t read any of the previous articles I’d suggest having a goo. Part 1: Zero Config Part 2: A Little Config Goes A long Way In this instalment we shall be attempting to speed up our development process by configuring our project with Webpack Dev Server. Dev server comes with some cool out of the box configuration such as automatic live page reloading so every time we make a change to a file our server will re-compile & serve. Some other optionals are enabling source-maps for debugging. We left off from here last time: https://github.com/shaneiadt/webpack-4-beginners/tree/master/a-little-config Installing Webpack-Dev-ServerOk let’s get to it, first install webpack-dev-server. 1npm i -D webpack-dev-server Update our npm scripts to run our dev server locally. Note we are still pointing to our development config webpack setup. 1234\"scripts\": { \"start\": \"webpack-dev-server --config webpack.config.js --open\", \"prod\": \"webpack --config webpack.prod.js\"}, We also need to update over dev configuration settings to tell Webpack Dev Server a few important things like what directory to server locally! We’ll also enable source-maps out of the box too 😄 Update webpack.config.js to the below. 12345678910const webpackCommon = require('./webpack.common')module.exports = { ...webpackCommon['options'], mode: 'development', devtool: 'inline-source-map', devServer: { contentBase: './dist' }} From here yes we can run out npm start script to launch our dev server which will server our ./dist directory like so. For example sake & ease let’s create an index.html file so our bundle.js can load into for dev purposes. The simplest way to do this is to use a plugin called html-webpack-plugin Bah! What are these plugins you speak of, begone demon! Not to fret as you may have guessed by now Webpack can be configured quite extensively, (quote straight from the docs) plugins are the backbone of Webpack! Let’s not dive to deep into plugins just quite yet. Installing Our First PluginWe’re just telling our bundler to create a default html document to inject our bundle JavaScript file into…that’s it…simple, now let’s move on. More on plugins at a later stage. Install the plugin. 1npm i -D html-webpack-plugin Add it into our webpack.common.js file as we want it to create a new html file for both our development & production builds / bundles. 12345678910111213const HtmlWebpackPlugin = require('html-webpack-plugin');const options = { entry: { home: './src/index.js', misc: './src/a-different-entry-file.js' }, plugins: [new HtmlWebpackPlugin()]}module.exports = { options} And that’s it….now run npm start test. A new browser window should open up on your localhost displaying a blank page. Open your dev tools & you should see some console logs appear! Testing Live ReloadingBrilliant stuff now let’s update something in one of our files to see if our dev server is reloading when one of our files update. Update ./src/message.js to: 1export default \"Webpack is even awesomer with Webpack Dev Server!!!\" Now save & you should see in your terminal window our dev server re-compile all our assets & automagically ❇ update everything being served locally. Further ConfigurationWe can configure our dev server a number of different ways. Here’s a couple examples: openPage: which page to navigate to first when your browser pops open. publicPath: where our static files will be served & can be accessed from. https: we can enable https support. headers: add additional headers to all responses. These are only a few options, for more read the docs, at the moment let’s just set our output folder & port number. Update webpack.config.js. 1234567891011const webpackCommon = require('./webpack.common')module.exports = { ...webpackCommon['options'], mode: 'development', devtool: 'inline-source-map', devServer: { contentBase: __dirname + '/dist', port: 9000 }} SummaryIn this short article we’ve managed to speed up our development process considerably by utilising webpacks-dev-server. We also configured some common settings & installed our very first plugin! Woop Woop 👏 We’ll dive more into webpack plugins next time to see how powerful and flexible they can make our build process. Github Repo: https://github.com/shaneiadt/webpack-4-beginners/tree/master/dev-it-faster document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2019/08/19/Webpack-4-Beginners-Dev-IT-Faster/"},{"title":"(CSS) Magic Is Real With Houdini","text":"Fed up with bloated hacky JavaScript manipulating CSS? Me too! Enter the Houdini Task Force with one simple goal…outline a collection of drafts to be accepted by W3C & added as common web standards. Well it doesn’t seem that simple but these guys are making great strides for the web and developers sake. Houdini will in essence offer the ability to extend the CSS rendering engine with low-level JavaScript APIs. Which will allow authors to extend the CSS engine offering massive improvements & capabilities from a user experience & performance point of view. Specifications Worklets CSS Paint API CSS Animation Worklet CSS Layout API Typed CSSOM WorkletsView specification Worklets themselves aren’t really anything to write home about. Similar to a Web Worker a Worklet is more of a concept that makes use of ES2015 class definitions helping to expose these low-level APIs within our browser. So what is a Worklet? A Worklet is almost like a mini event loop (what is the event loop) that can attach or reposition itself to different events it is configured to. In the words of Surma think of it as your swiss army knife to accessing these low-level APIs. Let’s look at our first low-level API that Worklets give us access to, the CSS Paint API. As most of these specs are still in the draft phase you may need to enable experimental web features to see them in action. chrome://flags/#enable-experimental-web-platform-featuresRead more about Worklets CSS Paint APIView specification Ok what the hell does this thing do you ask & why should I be excited about it! Imagine being able to programmatically control exactly what, when & how an object is drawn to the screen. With greater control using SVGs or jamming image files into your CSS may well become less of a headache. Instead of using things like background-image or border-image you can now reference a paint worklet like so paint(myPainter). Enough with the jabber show me the goodies dag-nab-it! Example Read more about CSS Paint API CSS Animation WorkletView specification This super-sweet Worklet allows us to run a set of instructions on a device at it’s native frame rate preventing jumpy & awkward animations. The first port of call for most animations in CSS is CSS Transitions, CSS Animations & the more complex Web Animations API. With the CSS Animation API / Worklet we can listen for any user input even scroll events! This topic is quite extensive so to prevent boredom I suggest checking out the example below & read more if you fancy. Example Read more about CSS Animation Worklet CSS Layout APIView specification With the ability to create & control your layouts with enormous detail never imagined before! The layout worklet can even help you build your own layouts & pass them into the display property, like so display: layout('myLayout'). Example Read more about the CSS Layout API Typed CSSOMView specification CSS Object Model or Cascading Style Sheets Object Model (Typed CSSOM). If you are familiar with a programming language or two you might have stumbled upon some Object Oriented stuff & data types. What this specification focuses on is the typing part, mainly the typing of CSS values as JavaScript objects. With Typed CSSOM every CSS value is now a member of a new base class called CSSStyleValue. These values can then be extended to help authors manage calculations & different value types such as rem, px, em & percent. Example The Task ForceWith engineers from the likes of Apple, Google & Microsoft working together (i know scary right!) on these potentially new web standards how could you not be excited! ConclusionI wanted to keep these sections brief…so there you have it! Not all the specifications are fully stable at the moment but Houdini & Worklets won’t be going away anytime soon. Keep your ear close to the coconut on this one peoples. Resources Is Houdini Ready Yet? CSS Houdini Github Wiki Houdini updates on developer.google. Houdini draft specifications Chrome Dev Summit Video Google Chrome Lab Houdini Examples document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2019/03/29/CSS-Magic-is-real-with-Houdini/"},{"title":"Functional Programming in JS","text":"What is Functional Programming?You may have heard this magical phrase Functional Programming (FP) flying around recently. Some people are touting it as the new or best approach for any project. The truth is FP has being around since the 1930’s specifically using LISP) originally specified in 1958. FP came from mathematics & is originally based on functional abstraction with Lambda Calculus. Some of the most popular FP languages at the moment are Haskell, Scala & Clojure. Luckily for us JavaScript supports all of the awesome conceptions we’re going to cover in this article. Core PrinciplesStick to these guys & you’ll be fine: A perfect function should… have only one task be predictable and easy to understand not rely on any external shared state be composable not directly mutate state, it should be immutable return the same amount of arguments from input to output cause no side-effects The idea behind FP is much the same as Object Oriented Programming (OOP): Don’t repeat yourself (DRY) Memory efficient Easy to extend Easy to maintain Understandable With these principles we can take advantage of Functional Programming to create a separation of concerns when writing our functions. With no classes definitions and a reliance on data & the functions that manipulate this data to be separate, we can reduce the number of potential bugs that might pop up and increase the overall speed of our application. FP mostly relies on well structured data types such as Arrays, Objects, Dictionaries & Lists. A little note before we continue, as we know functions in JS are considered first class citizens. Meaning they can be: assigned to a variable ✔123const func = () => 'BOOM'console.log(func()) passed as arguments into other functions ✔1234567const speak = (str) => console.log(str)function doStuff(fn){ fn('Hello')}doStuff(speak) returned by functions ✔1234567const giveMeAFn = () => { return (msg) => console.log(msg)}const fn = giveMeAFn()fn('JS is super sweet!') Pure Functions A Pure Function… is not influenced by anything other than the input parameters it receives. Passing in the same parameters will always result in the same output. does not cause any side-effects (doesn’t change any external or global scope variables) never changes any of the parameters it is passed in, this data should be considered immutable. We can however copy / clone any input parameters 👍 should be referentially transparent….click the link for a better definition than I could muster 😄 should only rely on it’s local variable scope Following these steps will make our functions easy to test & highly composable. Here is an example of a impure & pure function: impure 😳In this example we’re mutating a globally scoped variable by pushing a string into the array 😭 1234567const names = []function addName(n){ names.push(n)}addName('John') pure 😇In this example we’re taking in an array & string then returning a brand new array 😎 12345678910const names = []function addName(names, name){ return [ ...names, name ]}const newNames = addName(names, 'Donny') Can everything be Pure?Technically retrieving an input & producing an output is in itself a side-effect. It’s practically impossible to produce a program without some side-effects existing in some way. Side-effects & impurity aren’t bad, but reducing the amount that occur will make our program easier to understand & more reusable. The goal is to reduce the amount of side-effects required to make our program run smoothly. IdempotenceWhat the hell is this craziness??? 😨 In simple terms idempotence means when we run the same function with the same parameters multiple times the result will always be the same. Your functions should not communicate with the outside world & always does what we expect it to do. This makes our code more predictable & becomes a highly useful strategy within distributed & parallel systems. BAD TIME 💩This will result in a different result every single time! 1234567function badtime(n){ return Math.random(n)}console.log(badTime(69))console.log(badTime(69))console.log(badTime(69)) GOOD TIME 🤘This will result in the same result every single time! 1234567function goodTime(n){ return n * n}console.log(goodTime(69))console.log(goodTime(69))console.log(goodTime(69)) Imperative vs DeclarativeIn FP we strive for a more declarative set of instructions that we hand off to (usual) a complier of some kind to create a more imperative version of our code. Imperative = “Code that tells the machine what to do & how to do it“ Declarative = “Code that tells the machine what to do & what should happen“ We mere humans are more declarative creatures, for example if we were to tell our friend to grab a coffee for us while on their way to your place: Imperative instructions: Go to the newsagent Pick up an empty coffee cup Push button on machine Take out wallet Pay at counter ….etc Declarative instructions: Buy coffee for me FP helps us be more declarative with our programs. Making them easier to read at a high-level 😁 ImmutabilityThis means not changing the data or state of your program. So what do we do instead? We can make a copy of our data & return a new result. Mutable1234567const obj = {title: 'Mister Cucumber'}function clone(obj){ obj.title = 'MUTATION' // object property reference mutated}obj.title = 'NOOOOOO' // object property reference mutated Immutable1234567const obj = {title: 'Mister Cucumber'}function clone(obj){ return {...obj}}const clonedObj = clone(obj) This makes each function easier to test & never updates global state or causes any side-effects 😏 …but wait what about memory? Aren’t we creating unnecessary variables & filling up our heap? I’m not the best at explaining this so here’s an article on Structural Sharing to answer these burning questions! Higher Order Component & ClosuresWhat is a Higher Order Component (HOC): A higher order component is a function that does one of two things1) it takes one or more functions as parameters or2) it returns a function as a result Why is this important? With HOC functions we can abstract operations & compose multiple functions together. Making them highly reusable. Here’s two examples: 1234567const speak = (msg) => console.log(`${msg}: Says Hello!`)function person(fn){ fn('Shane')}person(speak) 12345678function person(name) { return () => { console.log(`My names is ${name}`) }}const p = person('Shane')p() What is Closure:This is a very powerful mechanism in JS we can use to maintain / contain some kind of state. 1234567891011121314151617181920212223242526function counter(){ let count = 0 function incrementCount(){ count++ } function getCount(){ return count } return { getCount, incrementCount }}const newCounter = counter()console.log(newCounter.getCount())newCounter.incrementCount()newCounter.incrementCount()newCounter.incrementCount()console.log(newCounter.getCount()) Like objects, closures as mentioned above can help us maintain some state within our program. A closure is created when a function accesses a variable outside of it’s immediate function scope. Pretty much if it doesn’t exist within the current context go up the scope chain & ask the parent(s). This can potentially lead to some impure operations if we’re not careful. 🙉 Currying 🍛A curried function is simply a function that takes multiple arguments one at a time. 123const add = (a) => (b) => a + badd(2)(4) Using currying we can create some awesome utility functions like so: 1234567const multiply = (m) => (n) => m * nconst multiplyByTwo = multiply(5)const multiplyByThree = multiply(3)multiplyByTwo(3) // 15multiplyByThree(3) // 9 Partial ApplicationSimilar to Currying but slightly different. It’s a way to partially apply some arguments to a function. This is a process of producing a function with a smaller number of parameters. Taking a function & applying some of the arguments on the initial call, then on the second it expects all / the rest of the arguments. 12345const multiply = (a, b, c) => a * b * cconst partialMultiplyByTwo = multiply.bind(null, 2);partialMultiplyByTwo(4, 3) // 24 Memoization = CachingIs a way to store values for use later on. It is a dynamic programming approach in an effort to increase your programs speed. It caches the return value based on the parameters given. This is another example of utilising a function closure to persist our cached object in the functions local scope 💪 12345678910111213141516171819function memoization(){ let cache = {} return (value) => { if(value in cache) { return cache[value] } cache[value] = value * 10 return cache[value]; }}const memo = memoization()console.log(1, memo(5)) // add's the property & result to it's local cache objectconsole.log(2, memo(5)) // see's the property in cache & returns it ArityLet’s keep things simple once again. Arity refers to the number of arguments a function takes. 🌈 Fewer arguments === Greatest of success && flexibility😖 More arguments === Saddest of the times && difficulty Compose & PipeComposing is a system principal design pattern. It abstracts data transformations into smaller obvious chunks. These smaller chunks can be composed into the desired configuration. This allows us to change the order of operations on our data a lot easier. 123456789101112const double = (num) => num * 2const triple = (num) => num * 3const square = (num) => num * numconst compose = (a, b, c) => (data) => a(b(c(data)))const pipe = (a, b, c) => (data) => c(b(a(data)))const doCompose = compose(triple, double, square)const doPipe = compose(triple, double, square)console.log('compose',doCompose(2))console.log('pipe',doPipe(2)) The difference between compose & pipe is: compose applies it’s arguments from right to left. pipe applies it’s arguments from left to right. Here’s another example were we are invoking the buyItem function & calling the compose function on every function argument while passing the data along the chain. 123456789101112131415161718192021222324const compose = (f, g) => (...args) => f(g(...args));buyItem( addTax, titleToUpperCase)({ title: 'Teddy Bear', price: 5 })function buyItem(...fns) { return fns.reduce(compose)}function addTax(item) { return { ...item, price: item.price + 10 }}function titleToUpperCase(item){ return { ...item, title: item.title.toUpperCase() }} Is FP the answer to everything?Just like most topics when it comes to computer science we shouldn’t take a 100% literal approach at all times. Nothing would ever get done in that case 😵 Functional Programming does promote a more: Predictable Easy to understand Composable Reduced bug environment With these shiny rewards awaiting there isn’t anything stopping us from throwing a little sprinkle of FP magic from time to time in an effort to build better applications. Still hungry, check out RxJS & Ramda or even Lodash. document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2019/12/11/Functional-Programming-in-JS/"},{"title":"Are Class Components Dead? - React Hooks","text":"Since the full release of Hooks with React version 16.8 the community has almost gone insane. Some developers have gone so bat shit crazy they’ve re-written all their apps to use React Hooks! What are hooks? Plainly put, like most things JavaScript they’re just functions….simples! But with the power of scope closures they expose the beauty of Reacts state, lifecycle methods & even Context API. You can even write your own hooks if you fancy. What kind of stuff can we do with Hooks, why should I care? Class components work just fine when I need some state & functional components are great for returning some JSX using a straight forward JS function. But wouldn’t it be cool if you could upgrade these functional components to have their own internal state or do some processing when mounted instead of relying on the parent component to decide if it needs to be re-render or not. Let’s start off simple & sprinkle a bit of state on the situation. useStateThis hook is amazing, it works slightly different from the class based approach. Instead of managing your state in one big object, which you still can do of course. With useState we can create slices of state like so. View Demo Code 12345678910111213141516171819202122232425262728293031import React, { useState } from \"react\";import ReactDOM from \"react-dom\";function WhatTheState() { const [count, setCount] = useState(0); const [text, setText] = useState(null); return ( {text !== null ? ( Hello my name is {text} & you pushed my button {count} times setCount(count + 1)}>Click mebutton> ) : null} {text === null ? Enter your name to start pushing!!p> : null} type=\"text\" value={text} onChange={event => setText(event.target.value)} /> div> );}const rootElement = document.getElementById(\"root\");ReactDOM.render(, rootElement); { // Just Like componentDidMount() setText(\"Johnny\") },[]) return ( {text !== null ? ( Hello my name is {text} & you pushed my button {count} times setCount(count + 1)}>Click mebutton> ) : null} {text === null ? Enter your name to start pushing!!p> : null} type=\"text\" value={text} onChange={event => setText(event.target.value)} /> div> );}const rootElement = document.getElementById(\"root\");ReactDOM.render(, rootElement); { // Similar to componentDidUpdate, we are watching for changes to the text variable setText(\"Johnny\") },[text]) Last but not least we can also fire some function based on the component unmounting too. By default if your useEffect function returns a function it will invoke it when the component is unmounted. 1234567useEffect(() => { // Similar to componentDidUpdate, we are watching for changes to the text variable setText(\"Johnny\") return function cleanup() { // Do some cleanup logic here! }; },[text]) What if we’re using some global state i hear you ask? Enter React’s Context API….but wait because we’re using functional components we need to use a hook instead…useContext hook to be exact. useContextBy far for me this hook is one of the best. I wouldn’t say I’ve had any issues with React but for a long time there was no way to manage global app state without using a third party package such as React Redux or React Easy State. Passing props around to other components can be ok when it’s two or three, but when you’re passing down props through maybe 5 different components just to tell a button the app is in a loading state it becomes a bit much! View Demo Code 12345678910111213141516171819202122232425262728293031323334353637import React from \"react\";import ReactDOM from \"react-dom\";import \"./styles.css\";class App extends React.Component { state = { loading: true }; render() { return ( \"App\"> this.state.loading} /> ); }}const Form = ({ loading }) => { return ( Fill Me Inh2> \"text\" /> form> );};const Button = ({ loading }) => { if (loading) return No Button Form is Loadingp>; return Submitbutton>;};const rootElement = document.getElementById(\"root\");ReactDOM.render(, rootElement); Do not fret my friends, useContext gives us access to extend our functional components. The below example illustrates how we can create some context & subscribe to it within our functional components using Reacts useContext hook. View Code Demo 123456789101112131415161718192021222324252627282930313233343536373839404142import React from \"react\";import ReactDOM from \"react-dom\";import \"./styles.css\";const AppContext = React.createContext({ loading: \"\" });class App extends React.Component { state = { loading: true }; render() { return ( \"App\"> this.state.loading} /> AppContext.Provider> ); }}const Form = () => { return ( Fill Me In > form> );};const Button = ({ loading }) => { const context = React.useContext(AppContext); if (context.loading) return No Button Form is Loadingp>; return Submitbutton>;};const rootElement = document.getElementById(\"root\");ReactDOM.render(, rootElement); Of course you could use another state management package but I like this approach as we’re relying on one package without any third party setup, no messing around with mapStateToProps for me anymore. Why mess with extra libraries when React provides a tool for exactly what we’re trying to solve. Side note: The size of your state will most likely determine the kind of management system you want to adopt. Last but not least React gives us the option to extend this architecture with the useHook function. This is prime time for a custom hook you might have in mind. I would provide another demo but my face is tired, have a read of this if you’re interested. ConclusionFirst off, React as a whole is amazing & I’m so glad I have the opportunity to develop with it every day…and get paid! Hooks are an amazing feature the React team have provided us with but understanding the core concepts of the React ecosystem & architecture in my opinion boils down to a strong grasp of stateful vs functional components. If you can write an app using only class based stateful components go right ahead, stateful container components aren’t leaving us anytime soon. Class components are a staple in React as far as understanding goes that’s for sure. Hooks just give it a little extension for those pure functions that don’t require a full state render method to be defined. Need some scoped state, useState…need some lifecycle management / side-effects to happen useEffect…want to clean up your global context state useContext…have an idea for a reusable hook…build your own! There are a couple of advanced uses regarding useContext coupled with useReducer & some Higher Order Components (HOC) to completely over all your state management which you can have a read of here. Also I’d like to point out there are a couple more hooks I haven’t mention in this article for example useMemo, useRef & a couple others. Love hooks or React? Read more React Hooks document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2019/06/22/Are-Class-Components-Dead-React-Hooks/"}],"tags":[{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"DOM","slug":"DOM","link":"/tags/DOM/"},{"name":"Shadow DOM","slug":"Shadow-DOM","link":"/tags/Shadow-DOM/"},{"name":"webpack","slug":"webpack","link":"/tags/webpack/"},{"name":"configuration","slug":"configuration","link":"/tags/configuration/"},{"name":"Webpack","slug":"Webpack","link":"/tags/Webpack/"},{"name":"Bundling","slug":"Bundling","link":"/tags/Bundling/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"dev server","slug":"dev-server","link":"/tags/dev-server/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"Houdini","slug":"Houdini","link":"/tags/Houdini/"},{"name":"JavaScript API","slug":"JavaScript-API","link":"/tags/JavaScript-API/"},{"name":"Functional Programming","slug":"Functional-Programming","link":"/tags/Functional-Programming/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"React Hooks","slug":"React-Hooks","link":"/tags/React-Hooks/"},{"name":"Javascript","slug":"Javascript","link":"/tags/Javascript/"}],"categories":[]}